---
title: "Graphing Change Over Time"
author: "Andy Grogan-Kaylor"
date: "today"
format:
  html:
    toc: true
    number-sections: true
    fig-height: 3
    lightbox: true
    theme:
      light: yeti
      dark: vapor
  pdf: 
    mainfont: "Arial"
    toc: true
    number-sections: true
    fig-height: 1.75
execute: 
  echo: false
bibliography: graphing-change-over-time.bib
csl: apa.csl
reference-location: margin
---

```{r call_libraries}
#| output: false

library(ggplot2) # beautiful graphs

library(ggthemes) # even more beautiful graphs

# library(cowplot) # graph layout

library(knitr) # knitting documents

library(pander) # nice tables

# library(xtable) # nice tables that "integrate well" with Tufte Latex

library(png) # for png's

library(grid) # grid graphics

library(RColorBrewer) # colors

library(viridis) # beautiful colors

```

```{r michigan_colors}

michigan_colors=c("#00274c", # blue
                  "#ffcb05", # maize
                  "#a4270b", # tappan red
                  "#e96300", # ross school orange
                  "#beb300", # wave field green
                  "#21c1bc", # taubman teal
                  "#2878ba", # arboretum blue
                  "#7207a5") # ann arbor amethyst

# individual colors

michigan_blue <- "#00274c"

michigan_maize <- "#ffcb05"

tappan_red <- "#a4270b"

ross_school_orange <- "#e96300"

wave_field_green <- "#beb300"

taubman_teal <- "#21c1bc"

arboretum_blue <- "#2878ba"

ann_arbor_amethyst <- "#7207a5"

cool_michigan_colors <- c(michigan_blue, 
                          wave_field_green, 
                          taubman_teal, 
                          arboretum_blue, 
                          ann_arbor_amethyst)

```

```{r make_data}

t <- rep(seq(1:5), 5)

# id number

id <- c(rep(1,5),
        rep(2,5),
        rep(3,5),
        rep(4,5),
        rep(5,5)) 

id <- factor(id)

# individual trajectories

outcome <-  c(seq(1,5), 
        seq(5,1, by= -1),
        rep(2,5),
        3, 3, 4, 2, 1,
        seq(0,4, by = 1)) 

# group membership over time

group <- c(rep("A", 5),
           rep("B", 5),
           rep("A", 2), rep("C", 3),
           rep("B", 3), rep("A", 2),
           rep("C", 1), rep("A", 4)) 

mydata <- data.frame(id, t, outcome)

mydata_wide <- reshape(mydata, 
                       idvar = 'id', 
                       timevar = 't', 
                       direction = 'wide')

row.names(mydata_wide) <- NULL # remove rownames from wide data

save(mydata, file="graphing-change-over-time.RData")

```


```{r make_plots}

mypointsize <- 2

mylinewidth <- 1 

p <- ggplot(data = mydata, 
            aes(x = t, 
                y = outcome, 
                color = id,
                linetype = id)) + # basic plot structure 
  xlab("time") + ylab("outcome") + 
  theme_minimal() + 
  scale_color_viridis_d() +
  scale_fill_viridis_d() 

myscatterplot <- p + 
  geom_point(size = mypointsize) +
  ggtitle("scatterplot")
    
mylineplot <- p + 
  geom_line(linewidth=mylinewidth) + 
  ggtitle("line plot") 
  
myspaghettiplot <- p + 
  geom_smooth(method = lm, 
              linewidth = mylinewidth, 
              se = FALSE) + 
  geom_smooth(aes(x = t, 
                  y = outcome), 
              linewidth = 2, 
              linetype = "dashed", 
              color = "black", 
              method = lm, 
              se = FALSE) + 
  ggtitle("spaghetti plot") 

myspaghettiplot2 <- p + 
  geom_smooth(aes(x = t, 
                  y = outcome, 
                  group = id), 
              method = lm, 
              linewidth = mylinewidth, 
              se = FALSE, 
              color = "black") + 
  geom_smooth(aes(x = t, 
                  y = outcome), 
              linewidth = 2, 
              linetype = "dashed", 
              color = "black", 
              method = lm, 
              se = FALSE) + 
  ggtitle("spaghetti plot") 

mysmoother <- p + 
  geom_smooth(linewidth = mylinewidth, 
              span = 1.0, 
              se = FALSE) + 
  ggtitle("smoothed trajectories")

mybarchart <- p + 
  geom_bar(aes(fill = id), 
           stat = "identity", 
           position = "dodge") + 
  ggtitle("bar graph") 

newdata <- subset(mydata, 
                  t == 1 | t == 5) # newdata with endpoints only

ratio <- bank_slopes(t, outcome) # optimal aspect ratio

myslopegraph <- ggplot(data = newdata, 
                       aes(x = t, 
                           y = outcome, 
                           color = id, 
                           fill = id,
                           linetype = id)) + 
  geom_line(linewidth = mylinewidth, 
            show.legend = FALSE) + 
  geom_point(size = 3, 
             shape = 21) + 
  ggtitle("slopegraph") +
  xlab("time") + 
  ylab("outcome") +
  scale_y_continuous(breaks=c(0, 1, 2, 3, 4, 5)) + 
  scale_x_continuous(breaks=c(1,5)) + 
  theme_minimal() + 
  scale_color_viridis_d() +
  scale_fill_viridis_d()


```

{{< pagebreak >}}

# Graphs

## Scatterplot

We start in thinking about graphing change over time with a scatterplot.[^scatterplot] [^color]

[^color]: Note that we are using *color* and *line type* to distinguish different individuals. This may not always be possible, especially when there are a large number of individuals in the data.

```{r}
#| fig-cap: "scatterplot"
#| label: fig-scatterplot

myscatterplot

```

[^scatterplot]:  Scatterplots show every data point.  However, with many data points, scatterplots may become overcomplicated, and difficult to interpret.  Points may even be plotted over other data points.

## Line Plot

A natural next step is to connect the dots of a scatterplot with straight line segments to form a line plot. [^smallmultiples] 

```{r}
#| column: margin
#| fig-cap: "line plot with small multiples"
#| label: fig-lineplot-smallmultiples

mylineplot + facet_wrap(~id) 

```

```{r}
#| fig-cap: "line plot"
#| label: fig-lineplot

mylineplot

```

[^smallmultiples]: With any of the options discussed, one may consider *small multiples* where each individual trajectory is placed in its own sub-graph.

## Spaghetti Plot

Instead of simply connecting the observations, one may estimate an individual linear trajectory.  In *multilevel modeling* these line plots showing individual estimated linear trajectories are sometimes called *spaghetti plots*.

```{r}
#| message: false
#| fig-cap: "spaghetti plot"
#| label: fig-spaghettiplot

myspaghettiplot

```

## Smoothed Trajectories

Alternatively, rather than connecting observations with straight lines, or estimating an overall straight line trajectory for each individual, it may be useful to *smooth* the trajectories by drawing curved lines between individual observations.[^smoothedtrajectories] 

```{r}
#| column: margin
#| message: false
#| fig-cap: "smoother plot with small multiples"
#| label: fig-smoother-smallmultiples

mysmoother + facet_wrap(~id)

```

```{r}
#| message: false
#| fig-cap: "smoother plot"
#| label: fig-smoother

mysmoother

```

[^smoothedtrajectories]: One needs to be careful, however, as the smoothed trajectories may give the impression of having more data points than one actually has.

## Slopegraph

An increasingly popular option is a slope graph.[^slopegraph]

[^slopegraph]:  In order to be clear and effective, a slope graph may often only show the outcome at the beginning point, and at the end point.  A slope graph may be less satisfactory when there are multiple timepoints, unless the slopegraph shows *all* the timepoints. The small multiple idea works with a slopegraph as well.

```{r}
#| column: margin
#| message: false
#| fig-cap: "slopegraph with small multiples"
#| label: fig-slopegraph-smallmultiples

myslopegraph + facet_wrap(~id) 

```

```{r}
#| message: false
#| fig-cap: "slopegraph"
#| label: fig-slopegraph

myslopegraph

```

# These Graphs Require Data In *Long Format*

The data used in this example are *simulated*. Many data sets, but not all, are originally created in the *wide* format--as shown in @fig-wide--where every row of data is an *individual*, and an individual only has a *single row*.  Ideally, every row in *wide* data is uniquely identified by an individual *id* number.  

```{r}
#| eval: true
#| fig-height: 9
#| column: margin
#| fig-cap: "long data"
#| label: fig-long

# img <- readPNG("longdata.png")
# 
# grid.raster(img)

pander(mydata)

```

```{r}
#| eval: true
#| fig-cap: "wide data"
#| label: fig-wide

panderOptions('table.continues', ' ')

pander(mydata_wide)

```

Generally, for graphing change over time, it is most appropriate to have data that are in a *long* format, as shown in @fig-long.  In *long* data every row represents a particular *measurement occasion* for a *particular individual*.  Each individual in the data set thus has *multiple rows*.  Ideally, every row in data in the *long* format is uniquely identified by the combination of an *id* number and a *study wave*.

Data can be *reshaped* from *wide* to *long* format, and *vice versa*. Two straightforward options are the `reshape` command as available in [Stata](http://www.stata.com) and the `pivot_*()` commands available in [R](https://www.r-project.org/).

Graphics made with `ggplot2` [@ggplot2].












